# Initialize Kubernetes cluster
- name: Setup Kubernetes cluster
  block:
    - name: Check if cluster is already initialized
      block:
        - name: Check user home for kubeconfig
          block:
            - name: Check if user home has a kubeconfig
              ansible.builtin.stat:
                path: "{{ ansible_env.HOME }}/.kube/config"
              register: user_home_kubeconfig_check

            - name: Debug user home kubeconfig check
              ansible.builtin.debug:
                msg:
                  - "Path: {{ ansible_env.HOME }}/.kube/config"
                  - "Exists: {{ user_home_kubeconfig_check.stat.exists }}"
                  - "Full stat: {{ user_home_kubeconfig_check.stat }}"

            - name: Set user home kubeconfig exists fact
              ansible.builtin.set_fact:
                kube_config_exists_in_user_home: "{{ user_home_kubeconfig_check.stat.exists }}"

        - name: Check root for kubeconfig
          block:
            - name: Check if root has a kubeconfig
              ansible.builtin.stat:
                path: /root/.kube/config
              register: root_kubeconfig_check
              become: true

            - name: Set root kubeconfig exists fact
              ansible.builtin.set_fact:
                kube_config_exists_in_root: "{{ root_kubeconfig_check.stat.exists }}"

        - name: Debug kubeconfig facts
          ansible.builtin.debug:
            msg:
              - "User home kubeconfig exists: {{ kube_config_exists_in_user_home }}"
              - "Root kubeconfig exists: {{ kube_config_exists_in_root }}"

        - name: Check cluster initialization status
          block:
            - name: Check if cluster is already initialized
              ansible.builtin.command: kubectl get nodes
              register: cluster_already_exists
              changed_when: false
              ignore_errors: true
              when: kube_config_exists_in_user_home or kube_config_exists_in_root

            - name: Set cluster initialization status
              ansible.builtin.set_fact:
                cluster_initialized: "{{ cluster_already_exists.rc == 0 and 'Ready' in cluster_already_exists.stdout }}"
              when: kube_config_exists_in_user_home or kube_config_exists_in_root

            - name: Debug cluster initialization status
              ansible.builtin.debug:
                msg: "Cluster is {{ 'already initialized' if cluster_initialized else 'not initialized' }}"

    - name: Move kubeconfig file to user directory
      when: cluster_initialized and kube_config_exists_in_root and not kube_config_exists_in_user_home
      block:
        - name: Create .kube directory if it doesn't exist
          ansible.builtin.file:
            path: "{{ ansible_env.HOME }}/.kube"
            state: directory
            mode: '0755'

        - name: Copy kubeconfig from root to user directory
          ansible.builtin.copy:
            src: /root/.kube/config
            dest: "{{ ansible_env.HOME }}/.kube/config"
            remote_src: true
            mode: '0644'
          become: true
          changed_when: true

    - name: Initialize cluster
      when: not cluster_initialized
      block:
        - name: Reset any existing cluster
          ansible.builtin.command: kubeadm reset -f
          become: true
          changed_when: true

        - name: Initialize cluster with kubeadm
          ansible.builtin.command: >
            kubeadm init
            --apiserver-advertise-address={{ ansible_default_ipv4.address }}
            --apiserver-cert-extra-sans=localhost
            --pod-network-cidr=10.244.0.0/16
            --ignore-preflight-errors=all
            --node-name={{ ansible_hostname }}
          become: true
          changed_when: not cluster_initialized

        - name: Create .kube directory
          ansible.builtin.file:
            path: "{{ ansible_env.HOME }}/.kube"
            state: directory
            mode: '0755'

        - name: Copy kubeconfig to user directory
          ansible.builtin.copy:
            src: /etc/kubernetes/admin.conf
            dest: "{{ ansible_env.HOME }}/.kube/config"
            remote_src: true
            mode: '0644'
          become: true
          changed_when: not cluster_initialized

- name: Wait for node to be ready
  kubernetes.core.k8s_info:
    name: "{{ ansible_hostname }}"
    kind: Node
    wait: true
    wait_condition:
      type: Ready
      status: "True"
    wait_timeout: 300
  register: node_wait
  retries: 6
  delay: 5
  until: node_wait is success
  changed_when: false
